""" Application to log into email account and check emails for phishing """

# import base64
import email
# https://docs.python.org/3/library/email.parser.html
import imaplib
# https://docs.python.org/3/library/imaplib.html
import imapclient 
import os
import pprint

from email.parser import HeaderParser

email_user = os.environ.get('EMAIL_ACCOUNT')
email_pass = os.environ.get('EMAIL_PW')
imap_server = os.environ.get('IMAP_SERVER')

MAILBOX = 'INBOX'

# IMAP = imaplib.IMAP4_SSL(f'{imap_server}', 993)
IMAP = imap(f'{imap_server}', 993)
IMAP.login(email_user, email_pass)
IMAP.select(MAILBOX)

parser = HeaderParser() # https://docs.python.org/3/library/email.parser.html
# IMAP Commands
# https://www.atmail.com/blog/imap-commands/

def get_email_by_id(email_id: int, debug=False) -> None:
    
    email_id = str(email_id)
    email_id = email_id.encode('utf-8')
    
    IMAP = imaplib.IMAP4_SSL(f'{imap_server}', 993)
    IMAP.login(email_user, email_pass)
    # IMAP.select(MAILBOX)
    
    # status, email_data = IMAP.fetch(email_id, '(RFC822)')
    
    print(IMAP.list_folders())
    
    # UUIDs = IMAP.search('ALL')
    # print(UUIDs)
    # status, email_data = IMAP.fetch(email_id, ['BODY[]'])
    # email_data = email_data[0][1].decode('utf-8')
    # https://docs.python.org/3/library/email.parser.html
    # header = parser.parsestr(email_data)
    # email_message = email.message_from_string(email_data)

    # if debug == True:
    # #? Show process of walking through all the header keys
    #     print('************************** HEADERS **************************')
    #     for key in header.keys():
    #         print(f'Email Header: {key} | {header[key]}')
    # else:        
    #     print(f'Email ID: {email_id.decode("utf-8")}')

    #     try:
    #         if header["X-Sender-IP"]:
    #             print(f'Sender IP Address: {header["X-Sender-IP"]}')
                
    #         if header["X-SID-PRA"]:
    #             print(f'Sender SID-PRA: {header["X-SID-PRA"]}')
                
    #         if header["Authentication-Results"]:
    #             print(f'Sender Authentication-Results: {header["Authentication-Results"]}')
            
    #         if header['Authentication-Results']:
    #             if 'spf=pass' not in header['Authentication-Results']:
    #                 print('SPF Failed')
    #             else:
    #                 print('SPF Passed in Authentication-Results')
                    
    #             if 'dkim=pass' not in header['Authentication-Results']:
    #                 print('DKIM Failed')
    #             else:
    #                 print('DKIM Passed')    
    #         elif header['received-spf']:
    #             if 'Pass' not in header['received-spf']:
    #                 print('SPF Failed')
    #             else:
    #                 print('SPF Passed in received-spf header')
    #         else:
    #             print('No Authentication-Results or received-spf headers found')
    #     except Exception as err:
    #         print(err)

    #     print()
    #     print(f'Message From: {email_message["From"]}')
    #     print(f'Message To: {email_message["To"]}')
    #     print(f'Message Subject: {email_message["Subject"]}')
        
    # if debug == True:
    #     if email_message.is_multipart():
            
        #     for part in email_message.walk():
        #         if part.get_content_type() == 'text/plain':
        #             email_body = part.get_payload(decode=True)
        #             print(f'Message Body: {email_body.decode("utf-8")}')
        # else:
        #     body = email_message.get_payload(decode=True)
        #     print(body.decode('utf-8'))

                    
                    # email_body = part.get_payload()
                    # for part in email_body:
                    #     print(part.get_filename())
                


            
    IMAP.close()
    IMAP.logout()


def get_all_emails():
    IMAP = imaplib.IMAP4_SSL(f'{imap_server}', 993)
    IMAP.login(email_user, email_pass)
    IMAP.select(MAILBOX)
    status, email_ids = IMAP.search(None, 'UNANSWERED') # for unseen emails, use 'UNSEEN' instead of 'ALL'
    email_ids = email_ids[0].split()

    for email_id in email_ids:
        print(f'email id: {email_id}')
        get_email_by_id(email_id)

    IMAP.close()
    IMAP.logout()

if __name__ == "__main__":
    # get_all_emails()
    get_email_by_id(4)